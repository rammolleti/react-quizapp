{"version":3,"sources":["components/SelectingDifficulty/index.js","components/Option/index.js","components/Question/index.js","components/QuizQuestions/index.js","App.js","reportWebVitals.js","index.js"],"names":["SelectingDifficulty","state","difficulty","renderTheDifficultyType","event","difficultyLevel","target","value","setState","setDifficultyAndStartQuiz","setDifficulty","props","this","className","type","onClick","Component","Option","isOptionSelected","isCorrectOption","onClickOption","userClickValue","correctAnswer","userClickCorrectAnswer","nextQuestion","skipTheQuestion","setTimeout","option","classNameForOption","key","Question","isOptionsUpdate","options","moveNextQuestion","setOptions","shuffledOptions","questionDetails","question","renderOptions","undefined","map","correctAnswerCount","QuizQuestion","questionCount","questionList","time","isComplectedAllQuestion","componentDidMount","a","getDataFromApi","startTimer","url","fetch","response","json","data","results","updateData","category","correct_answer","incorrectAnswers","incorrect_answers","updateTime","shufflingOptions","arrayOptions","index","length","random","Math","floor","temp","clearInterval","timeInterval","modifiedQuestion","setInterval","renderHeaderSection","renderResult","isComplectAllQuestion","QuizApp","isSelectDifficulty","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.238ddba1.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport \"./index.css\";\n\nclass SelectingDifficulty extends Component {\n  state = {\n    difficulty: \"NONE\",\n  };\n\n  renderTheDifficultyType = (event) => {\n    let difficultyLevel = event.target.value;\n\n    this.setState({\n      difficulty: difficultyLevel,\n    });\n  };\n\n  setDifficultyAndStartQuiz = () => {\n    const { difficulty } = this.state;\n    const { setDifficulty } = this.props;\n    if (difficulty !== \"NONE\") {\n      setDifficulty(difficulty);\n    }\n  };\n\n  render() {\n    const { difficulty } = this.state;\n    return (\n      <div className=\"quiz-selecting-section\">\n        <div className=\"title-section\">\n          <h1 className=\"quiz-selection-section-heading\">Quiz</h1>\n          <p className=\"side-headings \">\n            Category:<span className=\"word-highlight\"> Computer-Science</span>\n          </p>\n        </div>\n        <div className=\"quiz-start-section\">\n          <p className=\"difficulty-side-heading\">\n            Difficulty: <span className=\"difficulty\">{difficulty}</span>\n          </p>\n          <div className=\"buttons-container\">\n            <button\n              value=\"easy\"\n              className=\"button easy-button\"\n              type=\"button\"\n              onClick={this.renderTheDifficultyType}\n            >\n              EASY\n            </button>\n            <button\n              value=\"medium\"\n              className=\"button medius-button\"\n              type=\"button\"\n              onClick={this.renderTheDifficultyType}\n            >\n              MEDIUM\n            </button>\n            <button\n              value=\"hard\"\n              className=\"button hard-button\"\n              type=\"button\"\n              onClick={this.renderTheDifficultyType}\n            >\n              HARD\n            </button>\n          </div>\n          <button\n            className=\"start-button\"\n            onClick={this.setDifficultyAndStartQuiz}\n          >\n            Start Quiz\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SelectingDifficulty;\n","import { Component } from \"react\";\nimport \"./index.css\";\n\nclass Option extends Component {\n  state = {\n    isOptionSelected: false,\n    isCorrectOption: false,\n  };\n  onClickOption = (event) => {\n    const userClickValue = event.target.value;\n    const { correctAnswer, userClickCorrectAnswer } = this.props;\n    if (userClickValue === correctAnswer) {\n      this.setState({\n        isCorrectOption: true,\n        isOptionSelected: true,\n      });\n      userClickCorrectAnswer();\n    } else {\n      this.setState({\n        isOptionSelected: true,\n      });\n    }\n  };\n\n  nextQuestion = () => {\n    const { skipTheQuestion } = this.props;\n    setTimeout(() => {\n      skipTheQuestion();\n    }, 1000);\n  };\n\n  render() {\n    const { option } = this.props;\n    const { isCorrectOption, isOptionSelected } = this.state;\n    const value = isCorrectOption ? \"correct\" : \"wrong\";\n    let classNameForOption = \"\";\n    if (isOptionSelected) {\n      classNameForOption = value;\n      this.nextQuestion();\n    }\n\n    return (\n      <button\n        className={`option-button ${classNameForOption}`}\n        type=\"button\"\n        value={option}\n        onClick={this.onClickOption}\n      >\n        {option}\n      </button>\n    );\n  }\n}\n\nexport default Option;\n","import { Component } from \"react\";\n\nimport \"./index.css\";\nimport Option from \"../Option\";\n\nlet key = 0;\n\nclass Question extends Component {\n  state = {\n    isOptionsUpdate: false,\n    options: [],\n  };\n\n  skipTheQuestion = () => {\n    const { moveNextQuestion } = this.props;\n    moveNextQuestion();\n  };\n\n  setOptions = (shuffledOptions) => {\n    this.setState({\n      isOptionsUpdate: true,\n    });\n  };\n\n  render() {\n    const { isOptionsUpdate, options } = this.state;\n    const { questionDetails, userClickCorrectAnswer } = this.props;\n    const { question, shuffledOptions, correctAnswer } = questionDetails;\n    let renderOptions = options;\n    if (isOptionsUpdate === false && shuffledOptions !== undefined)\n      this.setOptions(shuffledOptions);\n    if (isOptionsUpdate) {\n      renderOptions = shuffledOptions;\n    }\n\n    return (\n      <div className=\"question-options-container\">\n        <h1 className=\"question\">{question}</h1>\n        <div className=\"option-container\">\n          {renderOptions.map((option) => (\n            <Option\n              option={option}\n              correctAnswer={correctAnswer}\n              skipTheQuestion={this.skipTheQuestion}\n              userClickCorrectAnswer={userClickCorrectAnswer}\n              key={key++}\n            />\n          ))}\n        </div>\n        <button\n          className=\"submit-button\"\n          type=\"button\"\n          onClick={this.skipTheQuestion}\n        >\n          Next\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Question;\n","import { Component } from \"react\";\nimport \"./index.css\";\nimport Question from \"../Question\";\n\nlet correctAnswerCount = 0;\nclass QuizQuestion extends Component {\n  state = {\n    questionCount: 0,\n    questionList: [],\n    time: 10,\n    question: \"\",\n    isComplectedAllQuestion: false,\n  };\n\n  componentDidMount = async () => {\n    await this.getDataFromApi();\n    this.startTimer();\n  };\n\n  getDataFromApi = async () => {\n    const { difficulty } = this.props;\n    const url = `https://opentdb.com/api.php?amount=10&category=18&difficulty=${difficulty}&type=multiple`;\n\n    const response = await fetch(url);\n    const data = await response.json();\n    const { results } = data;\n    const updateData = results.map((question) => ({\n      category: question.category,\n      correctAnswer: question.correct_answer,\n      incorrectAnswers: question.incorrect_answers,\n      question: question.question,\n    }));\n\n    this.setState({\n      questionList: updateData,\n    });\n  };\n\n  updateTime = () => {\n    const { time } = this.state;\n    if (time > 0) {\n      this.setState({\n        time: time - 1,\n      });\n    } else {\n      this.moveNextQuestion();\n    }\n  };\n\n  shufflingOptions = (correctAnswer, incorrectAnswers) => {\n    let arrayOptions = [];\n    if (correctAnswer !== undefined && incorrectAnswers !== undefined) {\n      arrayOptions = [correctAnswer, ...incorrectAnswers];\n      for (let index = arrayOptions.length - 1; index > 0; index--) {\n        let random = Math.floor(Math.random() * (index + 1));\n        let temp = arrayOptions[index];\n        arrayOptions[index] = arrayOptions[random];\n        arrayOptions[random] = temp;\n      }\n    }\n    return arrayOptions;\n  };\n  userClickCorrectAnswer = () => {\n    correctAnswerCount++;\n  };\n\n  moveNextQuestion = () => {\n    clearInterval(this.timeInterval);\n    this.setState({\n      time: 10,\n    });\n    const { questionCount } = this.state;\n    if (questionCount < 10) {\n      this.startTimer();\n    } else {\n      this.setState({\n        isComplectedAllQuestion: true,\n      });\n    }\n  };\n\n  startTimer = () => {\n    const { questionList, questionCount } = this.state;\n    const questionDetails = questionList[questionCount];\n    const { question, correctAnswer, incorrectAnswers } = questionDetails;\n    const shuffledOptions = this.shufflingOptions(\n      correctAnswer,\n      incorrectAnswers\n    );\n    const modifiedQuestion = {\n      question,\n      correctAnswer,\n      shuffledOptions,\n    };\n    this.setState({\n      question: modifiedQuestion,\n      questionCount: questionCount + 1,\n    });\n    this.timeInterval = setInterval(this.updateTime, 1000);\n  };\n\n  renderHeaderSection = () => {\n    const { questionCount, time } = this.state;\n\n    return (\n      <div className=\"header-container\">\n        <p className=\"header-side-headings\">\n          Question : <span className=\"question-count\">{questionCount}/10</span>\n        </p>\n        <p className=\"header-side-headings\">\n          Timer : <span className=\"timer\">{time} </span>sec\n        </p>\n      </div>\n    );\n  };\n\n  renderResult = () => (\n    <div className=\"result-container\">\n      <h1 className=\"result-heading\">\n        'You Got <span className=\"count\">{correctAnswerCount}</span> Correct\n        Answer'\n      </h1>\n    </div>\n  );\n\n  render() {\n    const { question, isComplectedAllQuestion } = this.state;\n    const isComplectAllQuestion = isComplectedAllQuestion ? false : true;\n    return (\n      <div className=\"quiz-questions-container\">\n        {isComplectAllQuestion ? (\n          <>\n            {this.renderHeaderSection()}\n            <Question\n              questionDetails={question}\n              moveNextQuestion={this.moveNextQuestion}\n              userClickCorrectAnswer={this.userClickCorrectAnswer}\n            />\n          </>\n        ) : (\n          this.renderResult()\n        )}\n      </div>\n    );\n  }\n}\n\nexport default QuizQuestion;\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport SelectingDifficulty from \"./components/SelectingDifficulty\";\nimport QuizQuestions from \"./components/QuizQuestions\";\n\nclass QuizApp extends Component {\n  state = {\n    difficulty: \"\",\n    isSelectDifficulty: false,\n  };\n\n  setDifficulty = (value) => {\n    this.setState({\n      difficulty: value,\n      isSelectDifficulty: true,\n    });\n  };\n\n  render() {\n    const { isSelectDifficulty, difficulty } = this.state;\n    return (\n      <div className=\"app-container\">\n        <div className=\"quiz-container\">\n          {isSelectDifficulty ? (\n            <QuizQuestions difficulty={difficulty} />\n          ) : (\n            <SelectingDifficulty setDifficulty={this.setDifficulty} />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default QuizApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport QuizApp from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <QuizApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}